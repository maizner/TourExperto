// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------

/// Event wrapper
/// @author Harry Roberts
/// @param {Bool} $self [false] - Whether or not to include current selector
/// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($self: false) {
  @if $self {
    &,
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  } @else {
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  }
}



// transition properties
/// 
/* use example:  @include transition(all,2s,ease-out);*/
@mixin transition($what: all, $time: 0.6s, $how: ease-in-out) {
    -webkit-transition: $what $time $how;
    -moz-transition:    $what $time $how;
    -ms-transition:     $what $time $how;
    -o-transition:      $what $time $how;
    transition:         $what $time $how;
}


// PREFIXES
/// 
@mixin btn-border-radius($radius) {
  border-radius: $radius;
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
}
@mixin prefix-placeholder {
  &:placeholder { @content }
  &:-moz-placeholder { @content; }
  &::-moz-placeholder { @content; }
  &::-webkit-input-placeholder { @content }
}



/// Mixin to prefix a property
/// @author Hugo Giraudel
/// @param {String} $property - Property name
/// @param {*} $value - Property value
/// @param {List} $prefixes (()) - List of prefixes to print
@mixin prefix($property, $value, $prefixes: ()) {
  @each $prefix in $prefixes {
    #{'-' + $prefix + '-' + $property}: $value;
  }
 
  // Output standard non-prefixed declaration
  #{$property}: $value;
}

/*
USAGE 
.selector {
  @include prefix(transform, rotate(45deg), webkit ms);
}
*/

/// Mixin to prefix several properties at once
/// @author Hugo Giraudel
/// @param {Map} $declarations - Declarations to prefix
/// @param {List} $prefixes (()) - List of prefixes to print
@mixin prefixes($declarations, $prefixes: ()) {
  @each $property, $value in $declarations {
    @each $prefix in $prefixes {
      #{'-' + $prefix + '-' + $property}: $value;
    }

    // Output standard non-prefixed declaration
    #{$property}: $value;
  }
}




@mixin mask-gradient( $from , $percentfrom , $color2 , $percent2 , $color3 ,$percent3 , $to, $percentto , $deg ) {
  width:100%;
  height: 100%; /* FF3.6-15 */ /* Chrome10-25,Safari5.1-6 */
  @include prefix(background, linear-gradient(
    $deg , 
    $from $percentfrom,
    $color2 $percent2,
    $color3 $percent3,
    $to $percentto
  ) , webkit ms o); /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */
  filter: progid:DXImageTransform.Microsoft.gradient(GradientType=1, startColorstr=#{$from}, endColorstr=#{$to})
}




@mixin media($media) {
  @if $media == xs {
    @media (max-width: $breakpoint-xs) { @content; }
  }
  @else if $media == sm {
    @media (min-width: $breakpoint-sm) and (max-width: $breakpoint-md) { @content; }
  }
  @else if $media == md {
    @media (min-width: $breakpoint-md) and (max-width: $breakpoint-lg) { @content; }
  }
  @else if $media == lg {
    @media (min-width: $breakpoint-lg) { @content; }
  }
  
  //Para manejar solamente dos breackpoints hasta máximo mobile, desde mínimo desktop
  @else if $media == mb {
    @media  (max-width: $breakpoint-to-down) { @content; }
  }
  @else if $media == dk {
    @media (min-width: $breakpoint-to-up) { @content; }
  }
}


